{"version":3,"file":"script.min.js","mappings":"mBAAoB,MAClB,MAAMA,EAAeC,SAASC,cAAc,SACtCC,EAAW,IAAIC,aACfC,EAAQF,EAASG,yBAAyBN,GAChDA,EAAaO,OAAS,GAGtB,MAAMC,EAAaP,SAASC,cAAc,oBACpCO,EAAWD,EAAWN,cAAc,qBACpCQ,EAAYF,EAAWN,cAAc,sBACrCS,EAAWV,SAASC,cAAc,oBAClCU,EAAiBX,SAASC,cAAc,2BACxCW,EAAoBZ,SAASC,cAAc,wBAC3CY,EAAiBb,SAASC,cAAc,yBACxBD,SAASC,cAAc,kBAE7Ca,OAAOC,iBAAiB,QAAQ,KAE9BC,IAGAjB,EAAagB,iBAAiB,cAAc,MA2D5C,WACE,MAAME,EAAWlB,EAAamB,YAAcnB,EAAaoB,SAAY,IACrER,EAAeS,MAAMC,UAAY,GAAGJ,IACtC,CA7DEK,GACAN,GAAU,IAIZT,EAAWQ,iBAAiB,SAAS,KAIZ,cAAnBb,EAASqB,OACXrB,EAASsB,SAIwB,UAA/BjB,EAAWkB,QAAQC,SACrB3B,EAAa4B,OAEbpB,EAAWkB,QAAQC,QAAU,OAC7BlB,EAASoB,UAAUC,IAAI,UACvBpB,EAAUmB,UAAUE,OAAO,WACa,SAA/BvB,EAAWkB,QAAQC,UAC5B3B,EAAagC,QACbxB,EAAWkB,QAAQC,QAAU,QAC7BjB,EAAUmB,UAAUC,IAAI,UACxBrB,EAASoB,UAAUE,OAAO,UAC5B,IAIF/B,EAAagB,iBAAiB,SAAS,KACrCR,EAAWkB,QAAQC,QAAU,QAC7BjB,EAAUmB,UAAUC,IAAI,UACxBrB,EAASoB,UAAUE,OAAO,UAC1BnB,EAAeS,MAAMC,UAAY,KACjCtB,EAAamB,YAAc,EAC3BnB,EAAaoB,SAAWpB,EAAaoB,QAAQ,IAI/C,MAAMa,EAAW9B,EAAS+B,aACpBC,EAAgBlC,SAASC,cAAc,kBAQ7C,SAASe,IACPJ,EAAkBuB,YAAc,IAAIC,KAAgC,IAA3BrC,EAAamB,aACnDmB,cACAC,OAAO,GAAI,GACdzB,EAAesB,YAAc,IAAIC,KAA6B,IAAxBrC,EAAaoB,UAChDkB,cACAC,OAAO,GAAI,EAChB,CAdAJ,EAAcnB,iBAAiB,UAAU,KACvCiB,EAASO,KAAKC,MAAQN,EAAcM,KAAK,IAG3CpC,EAAMqC,QAAQT,GAAUS,QAAQvC,EAASwC,aAmBzC,IAAIC,GAAY,EAEhB,SAASC,EAAMC,GACb,MAAMC,EACHD,EAAME,QAAUrC,EAASsC,YAAejD,EAAaoB,SACxDpB,EAAamB,YAAc4B,CAC7B,CAEApC,EAASK,iBAAiB,QAAS6B,GACnClC,EAASK,iBAAiB,aAAckC,GAAMN,GAAaC,EAAMK,KACjEvC,EAASK,iBAAiB,aAAa,IAAO4B,GAAY,IAC1DjC,EAASK,iBAAiB,WAAW,IAAO4B,GAAY,GAAO,IAI9D,EAAK,ECjGV,E","sources":["webpack://gulp-v2/./\u0000#src/assets/js/modules/musicPlayer.js","webpack://gulp-v2/./\u0000#src/assets/js/script.js"],"sourcesContent":["const musicPlayer = () => {\r\n  const audioElement = document.querySelector(\"audio\");\r\n  const audioCtx = new AudioContext();\r\n  const track = audioCtx.createMediaElementSource(audioElement);\r\n  audioElement.volume = 0.2\r\n\r\n  // Player controls and attributes\r\n  const playButton = document.querySelector(\".player-play-btn\");\r\n  const playIcon = playButton.querySelector(\".player-icon-play\");\r\n  const pauseIcon = playButton.querySelector(\".player-icon-pause\");\r\n  const progress = document.querySelector(\".player-progress\");\r\n  const progressFilled = document.querySelector(\".player-progress-filled\");\r\n  const playerCurrentTime = document.querySelector(\".player-time-current\");\r\n  const playerDuration = document.querySelector(\".player-time-duration\");\r\n  const volumeControl = document.querySelector(\".player-volume\")\r\n\r\n  window.addEventListener(\"load\", () => {\r\n    // Set times after page load\r\n    setTimes();\r\n\r\n    // Update progress bar and time values as audio plays\r\n    audioElement.addEventListener(\"timeupdate\", () => {\r\n      progressUpdate();\r\n      setTimes();\r\n    });\r\n\r\n    // Play button toggle\r\n    playButton.addEventListener(\"click\", () => {\r\n      // check if context is in suspended state (autoplay policy)\r\n      // By default browsers won't allow you to autoplay audio.\r\n      // You can overide by finding the AudioContext state and resuming it after a user interaction like a \"click\" event.\r\n      if (audioCtx.state === \"suspended\") {\r\n        audioCtx.resume();\r\n      }\r\n\r\n      // Play or pause track depending on state\r\n      if (playButton.dataset.playing === \"false\") {\r\n        audioElement.play();\r\n\r\n        playButton.dataset.playing = \"true\";\r\n        playIcon.classList.add(\"hidden\");\r\n        pauseIcon.classList.remove(\"hidden\");\r\n      } else if (playButton.dataset.playing === \"true\") {\r\n        audioElement.pause();\r\n        playButton.dataset.playing = \"false\";\r\n        pauseIcon.classList.add(\"hidden\");\r\n        playIcon.classList.remove(\"hidden\");\r\n      }\r\n    });\r\n\r\n    // if the track ends reset the player\r\n    audioElement.addEventListener(\"ended\", () => {\r\n      playButton.dataset.playing = \"false\";\r\n      pauseIcon.classList.add(\"hidden\");\r\n      playIcon.classList.remove(\"hidden\");\r\n      progressFilled.style.flexBasis = \"0%\";\r\n      audioElement.currentTime = 0;\r\n      audioElement.duration = audioElement.duration;\r\n    });\r\n\r\n    // Bridge the gap between gainNode and AudioContext so we can manipulate volume (gain)\r\n    const gainNode = audioCtx.createGain();\r\n    const volumeControl = document.querySelector(\".player-volume\");\r\n    volumeControl.addEventListener(\"change\", () => {\r\n      gainNode.gain.value = volumeControl.value;\r\n    });\r\n\r\n    track.connect(gainNode).connect(audioCtx.destination);\r\n\r\n    // Display currentTime and duration properties in real time\r\n    function setTimes() {\r\n      playerCurrentTime.textContent = new Date(audioElement.currentTime * 1000)\r\n        .toISOString()\r\n        .substr(11, 8);\r\n      playerDuration.textContent = new Date(audioElement.duration * 1000)\r\n        .toISOString()\r\n        .substr(11, 8);\r\n    }\r\n\r\n    // Update player timeline progress visually\r\n    function progressUpdate() {\r\n      const percent = (audioElement.currentTime / audioElement.duration) * 100;\r\n      progressFilled.style.flexBasis = `${percent}%`;\r\n    }\r\n\r\n    // Scrub player timeline to skip forward and back on click for easier UX\r\n    let mousedown = false;\r\n\r\n    function scrub(event) {\r\n      const scrubTime =\r\n        (event.offsetX / progress.offsetWidth) * audioElement.duration;\r\n      audioElement.currentTime = scrubTime;\r\n    }\r\n\r\n    progress.addEventListener(\"click\", scrub);\r\n    progress.addEventListener(\"mousemove\", (e) => mousedown && scrub(e));\r\n    progress.addEventListener(\"mousedown\", () => (mousedown = true));\r\n    progress.addEventListener(\"mouseup\", () => (mousedown = false));\r\n\r\n    // Track credit: Outfoxing the Fox by Kevin MacLeod under Creative Commons\r\n\r\n  }, false)\r\n}\r\n\r\nexport default musicPlayer;","\"use strict\"\r\n\r\nimport musicPlayer from './modules/musicPlayer.js';\r\n\r\nmusicPlayer()\r\n"],"names":["audioElement","document","querySelector","audioCtx","AudioContext","track","createMediaElementSource","volume","playButton","playIcon","pauseIcon","progress","progressFilled","playerCurrentTime","playerDuration","window","addEventListener","setTimes","percent","currentTime","duration","style","flexBasis","progressUpdate","state","resume","dataset","playing","play","classList","add","remove","pause","gainNode","createGain","volumeControl","textContent","Date","toISOString","substr","gain","value","connect","destination","mousedown","scrub","event","scrubTime","offsetX","offsetWidth","e"],"sourceRoot":""}